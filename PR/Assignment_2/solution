{"cells":[{"cell_type":"code","execution_count":6,"metadata":{},"outputs":[{"name":"stdout","output_type":"stream","text":"w1 = \n [[1 6]\n [3 4]\n [3 8]\n [5 6]] \nw2 = \n [[ 3  0]\n [ 1 -2]\n [ 3 -4]\n [ 5 -2]]\nw1_mean = \n [[1 6]\n [3 4]\n [3 8]\n [5 6]] \nw2_mean = \n [[ 3  0]\n [ 1 -2]\n [ 3 -4]\n [ 5 -2]]\nw1_covariance = \n [[2.66666667 0.        ]\n [0.         2.66666667]] \nw2_covariance = \n [[2.66666667 0.        ]\n [0.         2.66666667]]\nSince covariance(w1) = covariance(w2) = k.I, the decision boundary falls in the first case\nWhen p(w1) = 0.8 and p(w2) = 0.2 :\n[[3.]\n [6.]]\nx0  [3.         1.53790188]\nw  [0. 8.]\n[35.69678496298637, 19.696784962986374, 51.69678496298637, 35.69678496298637]\n[-12.303215037013626, -28.303215037013626, -44.30321503701363, -28.303215037013626]\n[1.53790188 1.53790188 1.53790188 1.53790188 1.53790188]\nWhen p(w1) = p(w2) :\n[[3.]\n [6.]]\nx0 [3. 2.]\n[32.0, 16.0, 48.0, 32.0]\n[-16.0, -32.0, -48.0, -32.0]\n[2. 2. 2. 2. 2.]\n"},{"data":{"image/png":"\n","text/plain":"<Figure size 504x504 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},{"data":{"image/png":"\n","text/plain":"<Figure size 504x504 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}],"source":["import pandas as pd\n","import numpy as np\n","import seaborn as sns\n","import matplotlib.pyplot as plt \n","\n","\n","def decision_boundary(x, w, x0):\n","    return(w.dot((x - x0).transpose()))\n","\n","\n","def main():\n","    w1 = np.array([[1, 6], [3, 4], [3, 8], [5, 6]])\n","    w2 = np.array([[3, 0], [1, -2], [3, -4], [5, -2]])\n","    \n","    print(\"w1 = \\n\", w1, \"\\nw2 = \\n\", w2)\n","\n","    w1_mean = np.mean(w1, axis = 0)\n","    w2_mean = np.mean(w2, axis = 0)\n","    \n","    print(\"w1_mean = \\n\", w1, \"\\nw2_mean = \\n\", w2)\n","    \n","    z1 = w1 - w1_mean\n","    z2 = w2 - w2_mean\n","    w1_covariance = (1 / 3) * z1.transpose().dot(z1)\n","    w2_covariance = (1 / 3) * z2.transpose().dot(z2)\n","\n","    print(\"w1_covariance = \\n\", w1_covariance, \"\\nw2_covariance = \\n\", w2_covariance)\n","\n","    print(\"Since covariance(w1) = covariance(w2) = k.I, the decision boundary falls in the first case\")\n","\n","    sigma_sq = 8/3\n","    \n","    print(\"When p(w1) = 0.8 and p(w2) = 0.2 :\")\n","    print(np.array([w1_mean]).transpose())\n","    x0 = 0.5 * (w1_mean + w2_mean) - sigma_sq * np.log(0.8 / 0.2) * (w1_mean - w2_mean) / ((w1_mean - w2_mean).transpose().dot(w1_mean - w2_mean))\n","    w = (w1_mean - w2_mean)\n","    print(\"x0 \", x0)\n","    print(\"w \", w)\n","    print([decision_boundary(ele, w, x0) for ele in w1])\n","    print([decision_boundary(ele, w, x0) for ele in w2])\n","\n","    f, ax = plt.subplots(figsize=(7, 7))\n","    c1, c2 = \"#3366AA\", \"#AA3333\"\n","    ax.scatter(*w1.T, c=c1, s=40)\n","    ax.scatter(*w2.T, c=c2, marker=\"D\", s=40)\n","    x_vec = np.linspace(-10, 10, 5)\n","    y_vec = ((w1_mean[0] - w2_mean[0])*x_vec - (w1_mean[0] - w2_mean[0])* x0[0] + (w1_mean[1] - w2_mean[1])*x0[1]) / (w1_mean[1] - w2_mean[1])\n","    print(y_vec)   \n","    plt.plot(x_vec, y_vec)\n","    \n","    print(\"When p(w1) = p(w2) :\")\n","    print(np.array([w1_mean]).transpose())\n","    x0 = 0.5 * (w1_mean + w2_mean) - sigma_sq * np.log(1) * (w1_mean - w2_mean) / ((w1_mean - w2_mean).transpose().dot(w1_mean - w2_mean))\n","    w = (w1_mean - w2_mean)\n","    print(\"x0\", x0)\n","    print([decision_boundary(ele, w, x0) for ele in w1])\n","    print([decision_boundary(ele, w, x0) for ele in w2])\n","\n","    f, ax = plt.subplots(figsize=(7, 7))\n","    c1, c2 = \"#3366AA\", \"#AA3333\"\n","    ax.scatter(*w1.T, c=c1, s=40, label = \"w1\")\n","    ax.legend()\n","    ax.scatter(*w2.T, c=c2, marker=\"D\", s=40, label = \"w2\")\n","    ax.legend()\n","    x_vec = np.linspace(-10, 10, 5)\n","    y_vec = (w[1]*x0[1] - w[0]*(x_vec - x0[0]))/w[1]\n","    print(y_vec)   \n","    plt.plot(x_vec, y_vec, 'r--')\n","    plt.show()\n","\n","\n","\n","if __name__ == \"__main__\":\n","    main()\n",""]},{"cell_type":"code","execution_count":7,"metadata":{},"outputs":[{"name":"stdout","output_type":"stream","text":"[[ 3.5        -9.5       ]\n [-9.5        26.16666667]] \n [[ 3.5        -9.5       ]\n [-9.5        26.16666667]]\nSince covariance(w1) = covariance(w2) , the decision boundary falls under the first case\nWhen p(w1) = 0.8 and p(w2) = 0.2 :\nx0 :  [ 0.48417021 -1.12973048]\nw :  [21.  7.]\n[11.740539038967599, 4.74053903896753, 18.74053903896767, 11.740539038967604, 18.740539038967682, 18.740539038967682]\n[-16.259460961032683, -9.259460961032616, -23.25946096103275, -16.259460961032673, -23.259460961032744, -23.259460961032758]\n[-5.         -3.88888889 -2.77777778 -1.66666667 -0.55555556  0.55555556\n  1.66666667  2.77777778  3.88888889  5.        ]\n[ 15.32278014  11.9894468    8.65611347   5.32278014   1.9894468\n  -1.34388653  -4.67721986  -8.0105532  -11.34388653 -14.67721986]\n"},{"data":{"image/png":"\n","text/plain":"<Figure size 504x504 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}],"source":["import pandas as pd\n","import numpy as np\n","import seaborn as sns\n","import matplotlib.pyplot as plt \n","\n","def decision_boundary(x, w, x0):\n","    return(w.dot((x - x0).transpose()))\n","\n","\n","def main():\n","    w1 = np.array([[1, -1], [2, -5], [3, -6], [4, -10], [5, -12], [6, -15]])\n","    w2 = (-1)*w1\n","    w1_mean = np.mean(w1, axis = 0)\n","    w2_mean = np.mean(w2, axis = 0)\n","\n","    z1 = np.array([list(map((lambda num : num - w1_mean[0]), w1[:, 0].tolist())), list(map((lambda num : num - w1_mean[1]), w1[:, 1].tolist()))])\n","    z2 = np.array([list(map((lambda num : num - w2_mean[0]), w2[:, 0].tolist())), list(map((lambda num : num - w2_mean[1]), w2[:, 1].tolist()))])\n","\n","    w1_covariance = (1 / 5) * z1.dot(z1.transpose())\n","    w2_covariance = (1 / 5) * z2.dot(z2.transpose())\n","\n","    print(w1_covariance, \"\\n\", w2_covariance)\n","\n","    print(\"Since covariance(w1) = covariance(w2) , the decision boundary falls under the first case\")\n","\n","    sigma_sq = 8/3\n","\n","    print(\"When p(w1) = 0.8 and p(w2) = 0.2 :\")\n","    x0 = 0.5 * (w1_mean + w2_mean) - sigma_sq * np.log(0.3 / 0.7) * (w1_mean - w2_mean) / (((w1_mean - w2_mean).transpose().dot(np.linalg.inv(w1_covariance).dot(w1_mean - w2_mean))))\n","    print(\"x0 : \", x0)\n","    w = np.linalg.inv(w1_covariance).dot(w1_mean - w2_mean)\n","    print(\"w : \", w)\n","\n","    print([decision_boundary(ele, w, x0) for ele in w1])\n","    print([decision_boundary(ele, w, x0) for ele in w2])\n","\n","\n","    x_vec = np.linspace(-5, 5, 10)\n","    y_vec = (w[1]*x0[1] - w[0]*(x_vec - x0[0]))/w[1]\n","    print(x_vec)\n","    print(y_vec)\n","    f, ax = plt.subplots(figsize=(7, 7))\n","    c1, c2 = \"#3366AA\", \"#AA3333\"\n","    ax.scatter(*w1.T, c=c1, s=40, label  = \"w1\")\n","    ax.scatter(*w2.T, c=c2, marker=\"D\", s=40, label = \"w2\")\n","    ax.legend()\n","    plt.plot(x_vec, y_vec, 'r--')\n","\n","if __name__ == \"__main__\":\n","    main()\n",""]},{"cell_type":"code","execution_count":8,"metadata":{},"outputs":[{"name":"stdout","output_type":"stream","text":"[[0.66666667 0.        ]\n [0.         2.66666667]] \n [[2.66666667 0.        ]\n [0.         2.66666667]]\nSince covariance(w1) = covariance(w2) = k.I, the decision boundary falls in the first case\nWhen p(w1) = p(w2) :\nWhen p(w1) = p(w2) :\n[[3.]\n [6.]]\nx0 -11.755647180559944\n[10.744352819440056, 5.306852819440056, 17.306852819440056, 10.744352819440056]\n[-6.693147180559944, -14.943147180559944, -18.693147180559944, -14.943147180559944]\n"},{"data":{"image/png":"\n","text/plain":"<Figure size 504x504 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":"w22 [ 1.125 -0.75 ]\n"}],"source":["import pandas as pd\n","import numpy as np\n","import seaborn as sns\n","import matplotlib.pyplot as plt \n","\n","def decision_boundary(x, W, w, x0):\n","    return(x.dot(W.dot(x.transpose())) + w.dot(x.transpose()) + x0)\n","\n","def main():\n","    w1 = np.array([[2, 6], [3, 4], [3, 8], [4, 6]])\n","    w2 = np.array([[3, 0], [1, -2], [3, -4], [5, -2]])\n","    w1_mean = np.mean(w1, axis = 0)\n","    w2_mean = np.mean(w2, axis = 0)\n","\n","    z1 = np.array([list(map((lambda num : num - w1_mean[0]), w1[:, 0].tolist())), list(map((lambda num : num - w1_mean[1]), w1[:, 1].tolist()))])\n","    z2 = np.array([list(map((lambda num : num - w2_mean[0]), w2[:, 0].tolist())), list(map((lambda num : num - w2_mean[1]), w2[:, 1].tolist()))])\n","\n","    w1_covariance = (1 / 3) * z1.dot(z1.transpose())\n","    w2_covariance = (1 / 3) * z2.dot(z2.transpose())\n","\n","    print(w1_covariance, \"\\n\", w2_covariance)\n","\n","    print(\"Since covariance(w1) = covariance(w2) = k.I, the decision boundary falls in the first case\")\n","\n","    sigma_sq = 8/3\n","    \n","    print(\"When p(w1) = p(w2) :\")\n","    w10 = -(0.5) * ((w1_mean.transpose().dot(np.linalg.inv(w1_covariance).dot(w1_mean))) - np.log(np.linalg.det(w1_covariance)))\n","    W1 = -(0.5) * np.linalg.inv(w1_covariance)\n","    w20 = -(0.5) * ((w2_mean.transpose().dot(np.linalg.inv(w2_covariance).dot(w2_mean))) - np.log(np.linalg.det(w2_covariance)))\n","    W2 = -(0.5) * np.linalg.inv(w2_covariance)\n","    w11 = (w1_mean).dot(np.linalg.inv(w1_covariance))\n","    w22 = (w2_mean).dot(np.linalg.inv(w2_covariance))\n","    W = W1 - W2\n","    w = w11 - w22\n","    x0 = w10 - w20\n","    \n","    print(\"When p(w1) = p(w2) :\")\n","    print(np.array([w1_mean]).transpose())\n","    print(\"x0\", x0)\n","    print([decision_boundary(ele, W, w, x0) for ele in w1])\n","    print([decision_boundary(ele, W, w, x0) for ele in w2])\n","\n","    f, ax = plt.subplots(figsize=(7, 7))\n","    c1, c2 = \"#3366AA\", \"#AA3333\"\n","    ax.scatter(*w1.T, c=c1, s=40, label = \"w1\")\n","    ax.scatter(*w2.T, c=c2, marker=\"D\", s=40, label = \"w2\")\n","    ax.legend()\n","    y, x = np.ogrid[-10 : 10 : 1000j, -10 : 10 : 1000j]\n","    plt.contour(x.ravel(), y.ravel(), W[0][0] * x ** 2 + x*y*(W[0][1] + W[1][0]) + W[1][1] * y ** 2 + x0 + w[0] * x + w[1] * y, [0])\n","\n","    # print(y_vec)   \n","    # plt.plot(x_vec, y_vec, 'r--')\n","    plt.show()\n","\n","    print(\"w22\", w22)\n","\n","\n","\n","if __name__ == \"__main__\":\n","    main()\n",""]},{"cell_type":"code","execution_count":9,"metadata":{},"outputs":[{"name":"stdout","output_type":"stream","text":"setosa train : \n    sepal.length  sepal.width  petal.length  petal.width variety\n13           4.3          3.0           1.1          0.1  Setosa\n2            4.7          3.2           1.3          0.2  Setosa\n39           5.1          3.4           1.5          0.2  Setosa\n37           4.9          3.6           1.4          0.1  Setosa\n47           4.6          3.2           1.4          0.2  Setosa\n9            4.9          3.1           1.5          0.1  Setosa\n44           5.1          3.8           1.9          0.4  Setosa\n6            4.6          3.4           1.4          0.3  Setosa\n17           5.1          3.5           1.4          0.3  Setosa\n48           5.3          3.7           1.5          0.2  Setosa\n1            4.9          3.0           1.4          0.2  Setosa\n12           4.8          3.0           1.4          0.1  Setosa\n19           5.1          3.8           1.5          0.3  Setosa\n34           4.9          3.1           1.5          0.2  Setosa\n35           5.0          3.2           1.2          0.2  Setosa\n29           4.7          3.2           1.6          0.2  Setosa\n31           5.4          3.4           1.5          0.4  Setosa\n25           5.0          3.0           1.6          0.2  Setosa\n4            5.0          3.6           1.4          0.2  Setosa\n10           5.4          3.7           1.5          0.2  Setosa\n23           5.1          3.3           1.7          0.5  Setosa\n40           5.0          3.5           1.3          0.3  Setosa\n7            5.0          3.4           1.5          0.2  Setosa\n30           4.8          3.1           1.6          0.2  Setosa\n22           4.6          3.6           1.0          0.2  Setosa\n21           5.1          3.7           1.5          0.4  Setosa\n11           4.8          3.4           1.6          0.2  Setosa\n18           5.7          3.8           1.7          0.3  Setosa\n5            5.4          3.9           1.7          0.4  Setosa\n38           4.4          3.0           1.3          0.2  Setosa\n0            5.1          3.5           1.4          0.2  Setosa\n26           5.0          3.4           1.6          0.4  Setosa\n42           4.4          3.2           1.3          0.2  Setosa\n45           4.8          3.0           1.4          0.3  Setosa\n24           4.8          3.4           1.9          0.2  Setosa\n49           5.0          3.3           1.4          0.2  Setosa\n28           5.2          3.4           1.4          0.2  Setosa\n27           5.2          3.5           1.5          0.2  Setosa\n16           5.4          3.9           1.3          0.4  Setosa\n41           4.5          2.3           1.3          0.3  Setosa\nversicolor : \n    sepal.length  sepal.width  petal.length  petal.width     variety\n58           6.6          2.9           4.6          1.3  Versicolor\n99           5.7          2.8           4.1          1.3  Versicolor\n83           6.0          2.7           5.1          1.6  Versicolor\n78           6.0          2.9           4.5          1.5  Versicolor\n92           5.8          2.6           4.0          1.2  Versicolor\n89           5.5          2.5           4.0          1.3  Versicolor\n56           6.3          3.3           4.7          1.6  Versicolor\n61           5.9          3.0           4.2          1.5  Versicolor\n64           5.6          2.9           3.6          1.3  Versicolor\n71           6.1          2.8           4.0          1.3  Versicolor\n54           6.5          2.8           4.6          1.5  Versicolor\n88           5.6          3.0           4.1          1.3  Versicolor\n98           5.1          2.5           3.0          1.1  Versicolor\n53           5.5          2.3           4.0          1.3  Versicolor\n51           6.4          3.2           4.5          1.5  Versicolor\n87           6.3          2.3           4.4          1.3  Versicolor\n70           5.9          3.2           4.8          1.8  Versicolor\n95           5.7          3.0           4.2          1.2  Versicolor\n90           5.5          2.6           4.4          1.2  Versicolor\n63           6.1          2.9           4.7          1.4  Versicolor\n74           6.4          2.9           4.3          1.3  Versicolor\n97           6.2          2.9           4.3          1.3  Versicolor\n77           6.7          3.0           5.0          1.7  Versicolor\n65           6.7          3.1           4.4          1.4  Versicolor\n85           6.0          3.4           4.5          1.6  Versicolor\n68           6.2          2.2           4.5          1.5  Versicolor\n59           5.2          2.7           3.9          1.4  Versicolor\n72           6.3          2.5           4.9          1.5  Versicolor\n81           5.5          2.4           3.7          1.0  Versicolor\n67           5.8          2.7           4.1          1.0  Versicolor\n91           6.1          3.0           4.6          1.4  Versicolor\n82           5.8          2.7           3.9          1.2  Versicolor\n60           5.0          2.0           3.5          1.0  Versicolor\n75           6.6          3.0           4.4          1.4  Versicolor\n66           5.6          3.0           4.5          1.5  Versicolor\n76           6.8          2.8           4.8          1.4  Versicolor\n55           5.7          2.8           4.5          1.3  Versicolor\n79           5.7          2.6           3.5          1.0  Versicolor\n62           6.0          2.2           4.0          1.0  Versicolor\nvirginica : \n     sepal.length  sepal.width  petal.length  petal.width    variety\n139           6.9          3.1           5.4          2.1  Virginica\n104           6.5          3.0           5.8          2.2  Virginica\n134           6.1          2.6           5.6          1.4  Virginica\n136           6.3          3.4           5.6          2.4  Virginica\n119           6.0          2.2           5.0          1.5  Virginica\n135           7.7          3.0           6.1          2.3  Virginica\n127           6.1          3.0           4.9          1.8  Virginica\n120           6.9          3.2           5.7          2.3  Virginica\n142           5.8          2.7           5.1          1.9  Virginica\n101           5.8          2.7           5.1          1.9  Virginica\n109           7.2          3.6           6.1          2.5  Virginica\n112           6.8          3.0           5.5          2.1  Virginica\n113           5.7          2.5           5.0          2.0  Virginica\n129           7.2          3.0           5.8          1.6  Virginica\n110           6.5          3.2           5.1          2.0  Virginica\n132           6.4          2.8           5.6          2.2  Virginica\n117           7.7          3.8           6.7          2.2  Virginica\n105           7.6          3.0           6.6          2.1  Virginica\n149           5.9          3.0           5.1          1.8  Virginica\n111           6.4          2.7           5.3          1.9  Virginica\n103           6.3          2.9           5.6          1.8  Virginica\n146           6.3          2.5           5.0          1.9  Virginica\n138           6.0          3.0           4.8          1.8  Virginica\n137           6.4          3.1           5.5          1.8  Virginica\n141           6.9          3.1           5.1          2.3  Virginica\n108           6.7          2.5           5.8          1.8  Virginica\n115           6.4          3.2           5.3          2.3  Virginica\n128           6.4          2.8           5.6          2.1  Virginica\n121           5.6          2.8           4.9          2.0  Virginica\n145           6.7          3.0           5.2          2.3  Virginica\n102           7.1          3.0           5.9          2.1  Virginica\n131           7.9          3.8           6.4          2.0  Virginica\n144           6.7          3.3           5.7          2.5  Virginica\n148           6.2          3.4           5.4          2.3  Virginica\n106           4.9          2.5           4.5          1.7  Virginica\n140           6.7          3.1           5.6          2.4  Virginica\n114           5.8          2.8           5.1          2.4  Virginica\n125           7.2          3.2           6.0          1.8  Virginica\n118           7.7          2.6           6.9          2.3  Virginica\n, test : \n     sepal.length  sepal.width  petal.length  petal.width     variety\n14            5.8          4.0           1.2          0.2      Setosa\n33            5.5          4.2           1.4          0.2      Setosa\n20            5.4          3.4           1.7          0.2      Setosa\n46            5.1          3.8           1.6          0.2      Setosa\n32            5.2          4.1           1.5          0.1      Setosa\n15            5.7          4.4           1.5          0.4      Setosa\n43            5.0          3.5           1.6          0.6      Setosa\n36            5.5          3.5           1.3          0.2      Setosa\n8             4.4          2.9           1.4          0.2      Setosa\n3             4.6          3.1           1.5          0.2      Setosa\n96            5.7          2.9           4.2          1.3  Versicolor\n57            4.9          2.4           3.3          1.0  Versicolor\n73            6.1          2.8           4.7          1.2  Versicolor\n84            5.4          3.0           4.5          1.5  Versicolor\n86            6.7          3.1           4.7          1.5  Versicolor\n69            5.6          2.5           3.9          1.1  Versicolor\n94            5.6          2.7           4.2          1.3  Versicolor\n93            5.0          2.3           3.3          1.0  Versicolor\n52            6.9          3.1           4.9          1.5  Versicolor\n80            5.5          2.4           3.8          1.1  Versicolor\n147           6.5          3.0           5.2          2.0   Virginica\n143           6.8          3.2           5.9          2.3   Virginica\n122           7.7          2.8           6.7          2.0   Virginica\n124           6.7          3.3           5.7          2.1   Virginica\n107           7.3          2.9           6.3          1.8   Virginica\n116           6.5          3.0           5.5          1.8   Virginica\n126           6.2          2.8           4.8          1.8   Virginica\n123           6.3          2.7           4.9          1.8   Virginica\n130           7.4          2.8           6.1          1.9   Virginica\n133           6.3          2.8           5.1          1.5   Virginica\n\n       sepal.length  sepal.width  petal.length  petal.width\ncount    150.000000   150.000000    150.000000   150.000000\nmean       5.843333     3.057333      3.758000     1.199333\nstd        0.828066     0.435866      1.765298     0.762238\nmin        4.300000     2.000000      1.000000     0.100000\n25%        5.100000     2.800000      1.600000     0.300000\n50%        5.800000     3.000000      4.350000     1.300000\n75%        6.400000     3.300000      5.100000     1.800000\nmax        7.900000     4.400000      6.900000     2.500000\nIndex(['sepal.length', 'sepal.width', 'petal.length', 'petal.width',\n       'variety'],\n      dtype='object')\nsetosa_mean : \nsepal.length    4.9525\nsepal.width     3.3625\npetal.length    1.4600\npetal.width     0.2450\ndtype: float64\nversicolor_mean : \nsepal.length    6.548718\nsepal.width     2.976923\npetal.length    5.523077\npetal.width     2.046154\ndtype: float64\nvirginica_mean : \nsepal.length    5.958974\nsepal.width     2.771795\npetal.length    4.276923\npetal.width     1.343590\ndtype: float64\n\nsetosa_z : \n[[-0.6525 -0.2525  0.1475 -0.0525 -0.3525 -0.0525  0.1475 -0.3525  0.1475\n   0.3475 -0.0525 -0.1525  0.1475 -0.0525  0.0475 -0.2525  0.4475  0.0475\n   0.0475  0.4475  0.1475  0.0475  0.0475 -0.1525 -0.3525  0.1475 -0.1525\n   0.7475  0.4475 -0.5525  0.1475  0.0475 -0.5525 -0.1525 -0.1525  0.0475\n   0.2475  0.2475  0.4475 -0.4525]\n [-0.3625 -0.1625  0.0375  0.2375 -0.1625 -0.2625  0.4375  0.0375  0.1375\n   0.3375 -0.3625 -0.3625  0.4375 -0.2625 -0.1625 -0.1625  0.0375 -0.3625\n   0.2375  0.3375 -0.0625  0.1375  0.0375 -0.2625  0.2375  0.3375  0.0375\n   0.4375  0.5375 -0.3625  0.1375  0.0375 -0.1625 -0.3625  0.0375 -0.0625\n   0.0375  0.1375  0.5375 -1.0625]\n [-0.36   -0.16    0.04   -0.06   -0.06    0.04    0.44   -0.06   -0.06\n   0.04   -0.06   -0.06    0.04    0.04   -0.26    0.14    0.04    0.14\n  -0.06    0.04    0.24   -0.16    0.04    0.14   -0.46    0.04    0.14\n   0.24    0.24   -0.16   -0.06    0.14   -0.16   -0.06    0.44   -0.06\n  -0.06    0.04   -0.16   -0.16  ]\n [-0.145  -0.045  -0.045  -0.145  -0.045  -0.145   0.155   0.055   0.055\n  -0.045  -0.045  -0.145   0.055  -0.045  -0.045  -0.045   0.155  -0.045\n  -0.045  -0.045   0.255   0.055  -0.045  -0.045  -0.045   0.155  -0.045\n   0.055   0.155  -0.045  -0.045   0.155  -0.045   0.055  -0.045  -0.045\n  -0.045  -0.045   0.155   0.055 ]]\nversicolor_z : \n[[ 0.64102564 -0.25897436  0.04102564  0.04102564 -0.15897436 -0.45897436\n   0.34102564 -0.05897436 -0.35897436  0.14102564  0.54102564 -0.35897436\n  -0.85897436 -0.45897436  0.44102564  0.34102564 -0.05897436 -0.25897436\n  -0.45897436  0.14102564  0.44102564  0.24102564  0.74102564  0.74102564\n   0.04102564  0.24102564 -0.75897436  0.34102564 -0.45897436 -0.15897436\n   0.14102564 -0.15897436 -0.95897436  0.64102564 -0.35897436  0.84102564\n  -0.25897436 -0.25897436  0.04102564]\n [ 0.12820513  0.02820513 -0.07179487  0.12820513 -0.17179487 -0.27179487\n   0.52820513  0.22820513  0.12820513  0.02820513  0.02820513  0.22820513\n  -0.27179487 -0.47179487  0.42820513 -0.47179487  0.42820513  0.22820513\n  -0.17179487  0.12820513  0.12820513  0.12820513  0.22820513  0.32820513\n   0.62820513 -0.57179487 -0.07179487 -0.27179487 -0.37179487 -0.07179487\n   0.22820513 -0.07179487 -0.77179487  0.22820513  0.22820513  0.02820513\n   0.02820513 -0.17179487 -0.57179487]\n [ 0.32307692 -0.17692308  0.82307692  0.22307692 -0.27692308 -0.27692308\n   0.42307692 -0.07692308 -0.67692308 -0.27692308  0.32307692 -0.17692308\n  -1.27692308 -0.27692308  0.22307692  0.12307692  0.52307692 -0.07692308\n   0.12307692  0.42307692  0.02307692  0.02307692  0.72307692  0.12307692\n   0.22307692  0.22307692 -0.37692308  0.62307692 -0.57692308 -0.17692308\n   0.32307692 -0.37692308 -0.77692308  0.12307692  0.22307692  0.52307692\n   0.22307692 -0.77692308 -0.27692308]\n [-0.04358974 -0.04358974  0.25641026  0.15641026 -0.14358974 -0.04358974\n   0.25641026  0.15641026 -0.04358974 -0.04358974  0.15641026 -0.04358974\n  -0.24358974 -0.04358974  0.15641026 -0.04358974  0.45641026 -0.14358974\n  -0.14358974  0.05641026 -0.04358974 -0.04358974  0.35641026  0.05641026\n   0.25641026  0.15641026  0.05641026  0.15641026 -0.34358974 -0.34358974\n   0.05641026 -0.14358974 -0.34358974  0.05641026  0.15641026  0.05641026\n  -0.04358974 -0.34358974 -0.34358974]]\nvirginia_z : \n[[ 0.35128205 -0.04871795 -0.44871795 -0.24871795 -0.54871795  1.15128205\n  -0.44871795  0.35128205 -0.74871795 -0.74871795  0.65128205  0.25128205\n  -0.84871795  0.65128205 -0.04871795 -0.14871795  1.15128205  1.05128205\n  -0.64871795 -0.14871795 -0.24871795 -0.24871795 -0.54871795 -0.14871795\n   0.35128205  0.15128205 -0.14871795 -0.14871795 -0.94871795  0.15128205\n   0.55128205  1.35128205  0.15128205 -0.34871795 -1.64871795  0.15128205\n  -0.74871795  0.65128205  1.15128205]\n [ 0.12307692  0.02307692 -0.37692308  0.42307692 -0.77692308  0.02307692\n   0.02307692  0.22307692 -0.27692308 -0.27692308  0.62307692  0.02307692\n  -0.47692308  0.02307692  0.22307692 -0.17692308  0.82307692  0.02307692\n   0.02307692 -0.27692308 -0.07692308 -0.47692308  0.02307692  0.12307692\n   0.12307692 -0.47692308  0.22307692 -0.17692308 -0.17692308  0.02307692\n   0.02307692  0.82307692  0.32307692  0.42307692 -0.47692308  0.12307692\n  -0.17692308  0.22307692 -0.37692308]\n [-0.12307692  0.27692308  0.07692308  0.07692308 -0.52307692  0.57692308\n  -0.62307692  0.17692308 -0.42307692 -0.42307692  0.57692308 -0.02307692\n  -0.52307692  0.27692308 -0.42307692  0.07692308  1.17692308  1.07692308\n  -0.42307692 -0.22307692  0.07692308 -0.52307692 -0.72307692 -0.02307692\n  -0.42307692  0.27692308 -0.22307692  0.07692308 -0.62307692 -0.32307692\n   0.37692308  0.87692308  0.17692308 -0.12307692 -1.02307692  0.07692308\n  -0.42307692  0.47692308  1.37692308]\n [ 0.05384615  0.15384615 -0.64615385  0.35384615 -0.54615385  0.25384615\n  -0.24615385  0.25384615 -0.14615385 -0.14615385  0.45384615  0.05384615\n  -0.04615385 -0.44615385 -0.04615385  0.15384615  0.15384615  0.05384615\n  -0.24615385 -0.14615385 -0.24615385 -0.14615385 -0.24615385 -0.24615385\n   0.25384615 -0.24615385  0.25384615  0.05384615 -0.04615385  0.25384615\n   0.05384615 -0.04615385  0.45384615  0.25384615 -0.34615385  0.35384615\n   0.35384615 -0.24615385  0.25384615]]\n\nsetosa_covariance : \n[[0.09332692 0.06586538 0.02446154 0.01244872]\n [0.06586538 0.10291667 0.01641026 0.01070513]\n [0.02446154 0.01641026 0.03271795 0.00620513]\n [0.01244872 0.01070513 0.00620513 0.00920513]]\nversicolor_covariance : \n[[0.19626561 0.05627876 0.13674556 0.04153189]\n [0.05627876 0.09689678 0.06063116 0.03635766]\n [0.13674556 0.06063116 0.19408284 0.06536489]\n [0.04153189 0.03635766 0.06536489 0.03784352]]\nvirginia_covariance : \n[[0.43275477 0.12317554 0.30656805 0.0633925 ]\n [0.12317554 0.11869822 0.08207101 0.04773176]\n [0.30656805 0.08207101 0.28331361 0.04585799]\n [0.0633925  0.04773176 0.04585799 0.07376726]]\n\n-2.129320311704923 -71.05441309062833 -148.02294110493096\nsetosa\n1.9039420182718674 -70.71691656292937 -133.3534677209443\nsetosa\n4.061202545315754 -40.136148139075615 -97.8117597597531\nsetosa\n5.05405694877048 -51.3596555484701 -102.91550894033224\nsetosa\n1.1032999364622231 -68.88534709586308 -121.63097939186378\nsetosa\n0.9884070489692878 -70.00635210685543 -132.7052212834839\nsetosa\n-1.158788856739486 -31.418660013398778 -81.34633728851372\nsetosa\n2.570913147270513 -50.31225228297528 -121.56664930241682\nsetosa\n5.064842466856737 -28.525031068436306 -76.79858116808734\nsetosa\n5.902680014712686 -31.808037089664836 -80.59152554786331\nsetosa\n-161.00663001925685 4.849917684452283 -4.28645603236373\nversicolor\n-89.05522345823329 2.289463225930972 -12.128084020766671\nversicolor\n-197.6379488835677 1.6908542640123292 -2.8348430435475427\nversicolor\n-214.88742304257462 2.3435188305621555 -0.31212477969009456\nversicolor\n-214.59035592112588 3.9044758628670553 -4.9748998689854576\nversicolor\n-128.9442492063338 4.590824325603241 -8.331705508834641\nversicolor\n-166.5146340787998 4.951580602867603 -2.8769593563177223\nversicolor\n-89.75909182881607 2.5333899901290247 -12.892540142944174\nversicolor\n-234.15469346863532 3.0961416313715375 -4.427945413554585\nversicolor\n-124.5665367427857 4.4494054962515825 -8.752796145335722\nversicolor\n-338.1266369591141 -1.904898944797937 3.8325324004571377\nvirginica\n-464.5924876268924 -8.580894282386469 3.7194788132567838\nvirginica\n-536.4460272994224 -13.194761978270686 0.5767773795133104\nvirginica\n-401.26861484405936 -2.566099316018752 3.880667722262706\nvirginica\n-446.0821215474122 -7.318271138911985 2.2923663495470468\nvirginica\n-341.3915994125805 0.8998832899022489 3.8752853306218107\nvirginica\n-274.65308575988166 0.8472199572871251 2.3466769838149535\nvirginica\n-286.4780290053839 0.32843040722647565 2.4229135276052975\nvirginica\n-434.7233687099139 -5.508899049332378 2.4388889293680522\nvirginica\n-265.8977247150518 2.856625156631668 1.8772550063917404\nversicolor\nAccuracy is :  0.9666666666666667\n"}],"source":["import pandas as pd\n","import numpy as np\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","from sklearn.model_selection import train_test_split\n","\n","def discriminant_function(x, covariance, mean):\n","    g = (0.5) * (-(x - mean).dot(np.linalg.inv(covariance).dot((x - mean).T)) - np.log(np.linalg.det(covariance)))\n","    return(g)\n","\n","def main():\n","    data = pd.read_csv(\"iris.csv\")\n","    variety = data['variety'].unique()\n","    column = data.columns\n","    setosa_train, t1 = train_test_split(data[0 : 50], test_size=0.2)\n","    versicolor_train, t2 = train_test_split(data[51 : 100], test_size=0.2)\n","    virginica_train, t3 = train_test_split(data[101 : 150], test_size=0.2)\n","    frames = [t1, t2, t3]\n","    test = pd.concat(frames)\n","    print(\"setosa train : \\n{}\\nversicolor : \\n{}\\nvirginica : \\n{}\\n, test : \\n{}\\n\".format(setosa_train, versicolor_train, virginica_train, test))\n","    print(data.describe())\n","    setosa_mean = np.mean(setosa_train, axis = 0)\n","    versicolor_mean = np.mean(versicolor_train, axis = 0)\n","    virginica_mean = np.mean(virginica_train, axis = 0)\n","    print(column)\n","    print(\"setosa_mean : \\n{}\\nversicolor_mean : \\n{}\\nvirginica_mean : \\n{}\\n\".format(setosa_mean, virginica_mean, versicolor_mean))\n","    setosa_z = np.array([list(map((lambda num : num -  setosa_mean[0]), setosa_train[column[0]].tolist())), list(map((lambda num : num -  setosa_mean[1]), setosa_train[column[1]].tolist())), list(map((lambda num : num -  setosa_mean[2]), setosa_train[column[2]].tolist())), list(map((lambda num : num -  setosa_mean[3]), setosa_train[column[3]].tolist()))])\n","    virginica_z = np.array([list(map((lambda num : num -  virginica_mean[0]), virginica_train[column[0]].tolist())), list(map((lambda num : num -  virginica_mean[1]), virginica_train[column[1]].tolist())), list(map((lambda num : num -  virginica_mean[2]), virginica_train[column[2]].tolist())), list(map((lambda num : num -  virginica_mean[3]), virginica_train[column[3]].tolist()))])\n","    versicolor_z = np.array([list(map((lambda num : num -  versicolor_mean[0]), versicolor_train[column[0]].tolist())), list(map((lambda num : num -  versicolor_mean[1]), versicolor_train[column[1]].tolist())), list(map((lambda num : num -  versicolor_mean[2]), versicolor_train[column[2]].tolist())), list(map((lambda num : num -  versicolor_mean[3]), versicolor_train[column[3]].tolist()))])\n","    print(\"setosa_z : \\n{}\\nversicolor_z : \\n{}\\nvirginia_z : \\n{}\\n\".format(setosa_z, versicolor_z, virginica_z))\n","\n","    setosa_covariance = (1/39) * (setosa_z.dot(setosa_z.T))\n","    versicolor_covariance = (1/39) * (versicolor_z.dot(versicolor_z.T))\n","    virginica_covariance = (1/39) * (virginica_z.dot(virginica_z.T))\n","    print(\"setosa_covariance : \\n{}\\nversicolor_covariance : \\n{}\\nvirginia_covariance : \\n{}\\n\".format(setosa_covariance, versicolor_covariance, virginica_covariance))\n","\n","    count = 0\n","\n","    for index, row in test.iterrows():\n","        test_vector = np.array([row[0], row[1], row[2], row[3]])\n","        \n","        g1 = discriminant_function(test_vector, setosa_covariance, setosa_mean)\n","        g2 = discriminant_function(test_vector, versicolor_covariance, versicolor_mean)\n","        g3 = discriminant_function(test_vector, virginica_covariance, virginica_mean)\n","\n","        \n","\n","        print(g1, g2, g3)\n","        if(g1 > g2 and g1 > g3):\n","            if(row[4] == 'Setosa'):\n","                count = count + 1\n","            print(\"setosa\")\n","        elif(g2 > g3):\n","            if(row[4] == 'Versicolor'):\n","                count = count + 1\n","\n","            print(\"versicolor\")\n","        else:\n","            if(row[4] == 'Virginica'):\n","                count = count + 1\n","            print(\"virginica\")\n","\n","    print(\"Accuracy is : \", count / 30)\n","\n","\n","if(__name__ == \"__main__\"):\n","    main()\n",""]}],"nbformat":4,"nbformat_minor":2,"metadata":{"language_info":{"name":"python","codemirror_mode":{"name":"ipython","version":3}},"orig_nbformat":2,"file_extension":".py","mimetype":"text/x-python","name":"python","npconvert_exporter":"python","pygments_lexer":"ipython3","version":3}}